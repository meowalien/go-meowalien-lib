// Code generated by MockGen. DO NOT EDIT.
// Source: ./arangodb/Arangodb.go

// Package arangodb is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	driver "github.com/arangodb/go-driver"
	gomock "github.com/golang/mock/gomock"
)

// MockCursor is a mock of Cursor interface.
type MockCursor struct {
	ctrl     *gomock.Controller
	recorder *MockCursorMockRecorder
}

// MockCursorMockRecorder is the mock recorder for MockCursor.
type MockCursorMockRecorder struct {
	mock *MockCursor
}

// NewMockCursor creates a new mock instance.
func NewMockCursor(ctrl *gomock.Controller) *MockCursor {
	mock := &MockCursor{ctrl: ctrl}
	mock.recorder = &MockCursorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCursor) EXPECT() *MockCursorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCursor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCursorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCursor)(nil).Close))
}

// Count mocks base method.
func (m *MockCursor) Count() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockCursorMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCursor)(nil).Count))
}

// Extra mocks base method.
func (m *MockCursor) Extra() driver.QueryExtra {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extra")
	ret0, _ := ret[0].(driver.QueryExtra)
	return ret0
}

// Extra indicates an expected call of Extra.
func (mr *MockCursorMockRecorder) Extra() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extra", reflect.TypeOf((*MockCursor)(nil).Extra))
}

// HasMore mocks base method.
func (m *MockCursor) HasMore() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMore")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMore indicates an expected call of HasMore.
func (mr *MockCursorMockRecorder) HasMore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMore", reflect.TypeOf((*MockCursor)(nil).HasMore))
}

// ReadDocuments mocks base method.
func (m *MockCursor) ReadDocument(ctx context.Context, result interface{}) (driver.DocumentMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDocuments", ctx, result)
	ret0, _ := ret[0].(driver.DocumentMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDocuments indicates an expected call of ReadDocuments.
func (mr *MockCursorMockRecorder) ReadDocument(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDocuments", reflect.TypeOf((*MockCursor)(nil).ReadDocument), ctx, result)
}

// Statistics mocks base method.
func (m *MockCursor) Statistics() driver.QueryStatistics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics")
	ret0, _ := ret[0].(driver.QueryStatistics)
	return ret0
}

// Statistics indicates an expected call of Statistics.
func (mr *MockCursorMockRecorder) Statistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockCursor)(nil).Statistics))
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockQuery) Query(ctx context.Context, query string, bindVars map[string]interface{}) (driver.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query, bindVars)
	ret0, _ := ret[0].(driver.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockQueryMockRecorder) Query(ctx, query, bindVars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQuery)(nil).Query), ctx, query, bindVars)
}

// MockReadDocumentFunc is a mock of ReadDocumentFunc interface.
type MockReadDocumentFunc struct {
	ctrl     *gomock.Controller
	recorder *MockReadDocumentFuncMockRecorder
}

// MockReadDocumentFuncMockRecorder is the mock recorder for MockReadDocumentFunc.
type MockReadDocumentFuncMockRecorder struct {
	mock *MockReadDocumentFunc
}

// NewMockReadDocumentFunc creates a new mock instance.
func NewMockReadDocumentFunc(ctrl *gomock.Controller) *MockReadDocumentFunc {
	mock := &MockReadDocumentFunc{ctrl: ctrl}
	mock.recorder = &MockReadDocumentFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadDocumentFunc) EXPECT() *MockReadDocumentFuncMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadDocumentFunc) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadDocumentFuncMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadDocumentFunc)(nil).Close))
}

// HasMore mocks base method.
func (m *MockReadDocumentFunc) HasMore() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMore")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasMore indicates an expected call of HasMore.
func (mr *MockReadDocumentFuncMockRecorder) HasMore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMore", reflect.TypeOf((*MockReadDocumentFunc)(nil).HasMore))
}

// ReadDocuments mocks base method.
func (m *MockReadDocumentFunc) ReadDocument(ctx context.Context, result interface{}) (driver.DocumentMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDocuments", ctx, result)
	ret0, _ := ret[0].(driver.DocumentMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDocuments indicates an expected call of ReadDocuments.
func (mr *MockReadDocumentFuncMockRecorder) ReadDocument(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDocuments", reflect.TypeOf((*MockReadDocumentFunc)(nil).ReadDocument), ctx, result)
}

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// Passthrough mocks base method.
func (m *MockProxy) Passthrough(ctx context.Context, s string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Passthrough", ctx, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Passthrough indicates an expected call of Passthrough.
func (mr *MockProxyMockRecorder) Passthrough(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Passthrough", reflect.TypeOf((*MockProxy)(nil).Passthrough), ctx, s)
}
